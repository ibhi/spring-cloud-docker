---
AWSTemplateFormatVersion: 2010-09-09
Description: Example CloudFormation template for running an ECS cluster on EC2 Spot Instances.
  Includes EC2 Spot Instance termination notice handler script.
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.1.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    vpc:
      CIDR: 10.0.0.0/16
  ecsOptimizedAmi:
    us-east-2:
      AMI: ami-ce1c36ab
    us-east-1:
      AMI: ami-28456852
    us-west-2:
      AMI: ami-decc7fa6
    us-west-1:
      AMI: ami-74262414
    eu-west-3:
      AMI: ami-9aef59e7
    eu-west-2:
      AMI: ami-67cbd003
    eu-west-1:
      AMI: ami-1d46df64
    eu-central-1:
      AMI: ami-509a053f
    ap-northeast-2:
      AMI: ami-c212b2ac
    ap-northeast-1:
      AMI: ami-872c4ae1
    ap-southeast-2:
      AMI: ami-58bb443a
    ap-southeast-1:
      AMI: ami-910d72ed
    ca-central-1:
      AMI: ami-435bde27
    ap-south-1:
      AMI: ami-00491f6f
    sa-east-1:
      AMI: ami-af521fc3
  amazonAmi:
    us-east-2:
      AMI: ami-ca3b11af
    us-east-1:
      AMI: ami-f6795a8c
    us-west-2:
      AMI: ami-03d7677b
    us-west-1:
      AMI: ami-aa4f4dca
    eu-west-3:
      AMI: ami-31e0564c
    eu-west-2:
      AMI: ami-b3312ad7
    eu-west-1:
      AMI: ami-072eb17e
    eu-central-1:
      AMI: ami-ac51cdc3
    ap-northeast-2:
      AMI: ami-78319116
    ap-northeast-1:
      AMI: ami-7aafcb1c
    ap-southeast-2:
      AMI: ami-882dd1ea
    ap-southeast-1:
      AMI: ami-1e0f7362
    ca-central-1:
      AMI: ami-2f4ecb4b
    ap-south-1:
      AMI: ami-531a4c3c
    sa-east-1:
      AMI: ami-0715586b
Outputs:
  applicationLoadBalancer:
    Description: The name of the Application Load Balancer
    Value:
      Ref: applicationLoadBalancer
  applicationLoadBalancerUrl:
    Description: The URL of the Application Load Balancer
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - applicationLoadBalancer
          - DNSName
  awsRegionName:
    Description: The name of the AWS Region your template was launched in
    Value:
      Ref: AWS::Region
  cloudWatchLogsGroupName:
    Description: Name of the CloudWatch Logs Group
    Value:
      Ref: cloudWatchLogsGroup
  ecsClusterName:
    Description: The name of the ECS cluster
    Value:
      Ref: ecsCluster
  snsTopic:
    Description: SNS Topic ARN
    Value:
      Ref: snsTopic
  spotFleetRequestId:
    Description: The Spot fleet Request Id
    Value:
      Ref: spotFleet
Parameters:
  ecsClusterTargetCapacity:
    Default: 2
    Description: Number of EC2 Spot instances to initially launch in the ECS cluster
    Type: Number
  ecsServiceTargetCapacity:
    Default: '1'
    Description: Number of tasks the ECS Service should initially start
    Type: Number
  # instanceType:
  #   AllowedValues:
  #   - c3.large
  #   - c4.large
  #   - m3.large
  #   - m4.large
  #   - r3.large
  #   - r4.large
  #   Default: c4.large
  #   Description: EC2 instance type to use for ECS cluster
  #   Type: String
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh access - defaults to 0.0.0.0/0
    Type: String
  spotBidPrice:
    Default: 0.3
    Description: Spot Instance bid price
    Type: String
  domainName:
    Description: A fully-qualified domain name.
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: (?!-)[a-zA-Z0-9-.]*(?<!-)
    ConstraintDescription: must be a valid fully-qualified domain name
    Default: ibrook.vpc

Resources:
# -------------------VPC START-------------------
  vpc:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: VPC for ECS on EC2 Spot fleet
    Type: AWS::EC2::VPC
  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway
  attachGateway:
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: AWS::EC2::VPCGatewayAttachment
  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Properties:
      Tags:
      - Key: Name
        Value: Public Route Table
      VpcId:
        Ref: vpc
    Type: AWS::EC2::RouteTable
  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: AWS::EC2::Route
  publicSubnet1:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet1
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  publicSubnet2:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet2RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet2
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
# -------------------VPC END------------------------------------------

# -------------------Application Load Balancer Start------------------
  applicationLoadBalancerSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Application Load Balancer Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup

  applicationLoadBalancer:
    DependsOn:
    - applicationLoadBalancerSecurityGroup
    Properties:
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 30
      Scheme: internet-facing
      SecurityGroups:
      - Ref: applicationLoadBalancerSecurityGroup
      Subnets:
      - Ref: publicSubnet1
      - Ref: publicSubnet2
      Tags:
      - Key: Name
        Value: Application Load Balancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer

  applicationLoadBalancerTargetGroup:
    DependsOn:
    - vpc
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /agency                   # Todo: Update health check path
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Port: 8080                                # Todo: Update port
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: Application Load Balancer Target Group
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      UnhealthyThresholdCount: 10
      VpcId:
        Ref: vpc
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  applicationLoadBalancerListener:
    DependsOn:
    - applicationLoadBalancer
    - applicationLoadBalancerTargetGroup
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: applicationLoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: applicationLoadBalancer
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener

# -------------------Application Load Balancer End------------------

# -------------------Cloud Watch Logs Group Start --------------------
  cloudWatchLogsGroup:
    Properties:
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
# -------------------Cloud Watch Logs Group End ----------------------

# -------------------Splot fleet Start -------------------------------
  securityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Spot fleet instance Security Group
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup

  securityGroupIngress:
    DependsOn:
    - securityGroup
    - applicationLoadBalancerSecurityGroup
    Properties:
      FromPort: 31000
      GroupId:
        Fn::GetAtt:
        - securityGroup
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - applicationLoadBalancerSecurityGroup
        - GroupId
      ToPort: 61000
    Type: AWS::EC2::SecurityGroupIngress

  spotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
    Type: AWS::IAM::Role

  spotFleetInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:UpdateContainerInstancesState
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: ecsUpdateContainerInstancesStatePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName: cloudWatchLogsPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
              Ref: snsTopic
          Version: 2012-10-17
        PolicyName: snsPublishPolicy
    Type: AWS::IAM::Role

  spotFleetInstanceProfile:
    DependsOn:
    - spotFleetInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: spotFleetInstanceRole
    Type: AWS::IAM::InstanceProfile

  spotFleet:
    DependsOn:
    - spotFleetRole
    - spotFleetInstanceProfile
    - ecsCluster
    - securityGroup
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        IamFleetRole:
          Fn::GetAtt:
          - spotFleetRole
          - Arn
        LaunchSpecifications:
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ecsOptimizedAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: c5.large #0.0219
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                export PATH=/usr/local/bin:$PATH

                yum -y --security update

                yum -y install jq

                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config



                cat <<EOF > /tmp/awslogs.conf

                [general]

                state_file = /var/awslogs/state/agent-state



                [/var/log/dmesg]

                file = /var/log/dmesg

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg

                initial_position = start_of_file



                [/var/log/messages]

                file = /var/log/messages

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages

                datetime_format = %b %d %H:%M:%S

                initial_position = start_of_file



                [/var/log/docker]

                file = /var/log/docker

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker

                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                initial_position = start_of_file



                [/var/log/ecs/ecs-init.log]

                file = /var/log/ecs/ecs-init.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/ecs-agent.log]

                file = /var/log/ecs/ecs-agent.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/audit.log]

                file = /var/log/ecs/audit.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file

                EOF



                cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

                python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf



                cat <<EOF > /etc/init/cloudwatch-logs-start.conf

                description "Configure and start CloudWatch Logs agent on Amazon ECS container
                instance"

                author "Amazon Web Services"

                start on started ecs

                script

                exec 2>>/var/log/cloudwatch-logs-start.log

                set -x

                until curl -s http://localhost:51678/v1/metadata; do sleep 1; done

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf

                sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf

                chkconfig awslogs on

                service awslogs start

                end script

                EOF



                cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf

                description "Start spot instance termination handler monitoring script"

                author "Amazon Web Services"

                start on started ecs

                script

                echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid

                exec /usr/local/bin/spot-instance-termination-notice-handler.sh

                end script

                pre-start script

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice handler started"

                end script

                EOF



                cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh

                #!/bin/bash

                while sleep 5; do

                if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                then

                /bin/false

                else

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice detected"

                STATUS=DRAINING

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                logger "[spot-instance-termination-notice-handler.sh]: putting instance in state
                \$STATUS"

                logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws
                ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances
                \$CONTAINER_INSTANCE --status \$STATUS"

                /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER
                --container-instances \$CONTAINER_INSTANCE --status \$STATUS

                logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws
                sns publish --topic-arn ${snsTopic} --message \"Spot instance termination notice
                detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.
                Putting instance in state \$STATUS.\""

                /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instance
                termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:
                \$CONTAINER_INSTANCE. Putting instance in state \$STATUS."

                logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."

                sleep 120

                fi

                done

                EOF



                chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ecsOptimizedAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: c4.large #0.0262
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                export PATH=/usr/local/bin:$PATH

                yum -y --security update

                yum -y install jq

                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config



                cat <<EOF > /tmp/awslogs.conf

                [general]

                state_file = /var/awslogs/state/agent-state



                [/var/log/dmesg]

                file = /var/log/dmesg

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg

                initial_position = start_of_file



                [/var/log/messages]

                file = /var/log/messages

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages

                datetime_format = %b %d %H:%M:%S

                initial_position = start_of_file



                [/var/log/docker]

                file = /var/log/docker

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker

                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                initial_position = start_of_file



                [/var/log/ecs/ecs-init.log]

                file = /var/log/ecs/ecs-init.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/ecs-agent.log]

                file = /var/log/ecs/ecs-agent.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/audit.log]

                file = /var/log/ecs/audit.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file

                EOF



                cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

                python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf



                cat <<EOF > /etc/init/cloudwatch-logs-start.conf

                description "Configure and start CloudWatch Logs agent on Amazon ECS container
                instance"

                author "Amazon Web Services"

                start on started ecs

                script

                exec 2>>/var/log/cloudwatch-logs-start.log

                set -x

                until curl -s http://localhost:51678/v1/metadata; do sleep 1; done

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf

                sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf

                chkconfig awslogs on

                service awslogs start

                end script

                EOF



                cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf

                description "Start spot instance termination handler monitoring script"

                author "Amazon Web Services"

                start on started ecs

                script

                echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid

                exec /usr/local/bin/spot-instance-termination-notice-handler.sh

                end script

                pre-start script

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice handler started"

                end script

                EOF



                cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh

                #!/bin/bash

                while sleep 5; do

                if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                then

                /bin/false

                else

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice detected"

                STATUS=DRAINING

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                logger "[spot-instance-termination-notice-handler.sh]: putting instance in state
                \$STATUS"

                logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws
                ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances
                \$CONTAINER_INSTANCE --status \$STATUS"

                /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER
                --container-instances \$CONTAINER_INSTANCE --status \$STATUS

                logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws
                sns publish --topic-arn ${snsTopic} --message \"Spot instance termination notice
                detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.
                Putting instance in state \$STATUS.\""

                /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instance
                termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:
                \$CONTAINER_INSTANCE. Putting instance in state \$STATUS."

                logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."

                sleep 120

                fi

                done

                EOF



                chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh

                '
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ecsOptimizedAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: m5.large #0.0277
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                export PATH=/usr/local/bin:$PATH

                yum -y --security update

                yum -y install jq

                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config



                cat <<EOF > /tmp/awslogs.conf

                [general]

                state_file = /var/awslogs/state/agent-state



                [/var/log/dmesg]

                file = /var/log/dmesg

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg

                initial_position = start_of_file



                [/var/log/messages]

                file = /var/log/messages

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages

                datetime_format = %b %d %H:%M:%S

                initial_position = start_of_file



                [/var/log/docker]

                file = /var/log/docker

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker

                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                initial_position = start_of_file



                [/var/log/ecs/ecs-init.log]

                file = /var/log/ecs/ecs-init.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/ecs-agent.log]

                file = /var/log/ecs/ecs-agent.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/audit.log]

                file = /var/log/ecs/audit.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file

                EOF



                cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

                python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf



                cat <<EOF > /etc/init/cloudwatch-logs-start.conf

                description "Configure and start CloudWatch Logs agent on Amazon ECS container
                instance"

                author "Amazon Web Services"

                start on started ecs

                script

                exec 2>>/var/log/cloudwatch-logs-start.log

                set -x

                until curl -s http://localhost:51678/v1/metadata; do sleep 1; done

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf

                sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf

                chkconfig awslogs on

                service awslogs start

                end script

                EOF



                cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf

                description "Start spot instance termination handler monitoring script"

                author "Amazon Web Services"

                start on started ecs

                script

                echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid

                exec /usr/local/bin/spot-instance-termination-notice-handler.sh

                end script

                pre-start script

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice handler started"

                end script

                EOF



                cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh

                #!/bin/bash

                while sleep 5; do

                if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                then

                /bin/false

                else

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice detected"

                STATUS=DRAINING

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                logger "[spot-instance-termination-notice-handler.sh]: putting instance in state
                \$STATUS"

                logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws
                ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances
                \$CONTAINER_INSTANCE --status \$STATUS"

                /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER
                --container-instances \$CONTAINER_INSTANCE --status \$STATUS

                logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws
                sns publish --topic-arn ${snsTopic} --message \"Spot instance termination notice
                detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.
                Putting instance in state \$STATUS.\""

                /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instance
                termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:
                \$CONTAINER_INSTANCE. Putting instance in state \$STATUS."

                logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."

                sleep 120

                fi

                done

                EOF



                chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh

                '

        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ecsOptimizedAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: r3.large #0.0295
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                export PATH=/usr/local/bin:$PATH

                yum -y --security update

                yum -y install jq

                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config



                cat <<EOF > /tmp/awslogs.conf

                [general]

                state_file = /var/awslogs/state/agent-state



                [/var/log/dmesg]

                file = /var/log/dmesg

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg

                initial_position = start_of_file



                [/var/log/messages]

                file = /var/log/messages

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages

                datetime_format = %b %d %H:%M:%S

                initial_position = start_of_file



                [/var/log/docker]

                file = /var/log/docker

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker

                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                initial_position = start_of_file



                [/var/log/ecs/ecs-init.log]

                file = /var/log/ecs/ecs-init.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/ecs-agent.log]

                file = /var/log/ecs/ecs-agent.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/audit.log]

                file = /var/log/ecs/audit.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file

                EOF



                cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

                python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf



                cat <<EOF > /etc/init/cloudwatch-logs-start.conf

                description "Configure and start CloudWatch Logs agent on Amazon ECS container
                instance"

                author "Amazon Web Services"

                start on started ecs

                script

                exec 2>>/var/log/cloudwatch-logs-start.log

                set -x

                until curl -s http://localhost:51678/v1/metadata; do sleep 1; done

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf

                sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf

                chkconfig awslogs on

                service awslogs start

                end script

                EOF



                cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf

                description "Start spot instance termination handler monitoring script"

                author "Amazon Web Services"

                start on started ecs

                script

                echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid

                exec /usr/local/bin/spot-instance-termination-notice-handler.sh

                end script

                pre-start script

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice handler started"

                end script

                EOF



                cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh

                #!/bin/bash

                while sleep 5; do

                if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                then

                /bin/false

                else

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice detected"

                STATUS=DRAINING

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                logger "[spot-instance-termination-notice-handler.sh]: putting instance in state
                \$STATUS"

                logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws
                ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances
                \$CONTAINER_INSTANCE --status \$STATUS"

                /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER
                --container-instances \$CONTAINER_INSTANCE --status \$STATUS

                logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws
                sns publish --topic-arn ${snsTopic} --message \"Spot instance termination notice
                detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.
                Putting instance in state \$STATUS.\""

                /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instance
                termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:
                \$CONTAINER_INSTANCE. Putting instance in state \$STATUS."

                logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."

                sleep 120

                fi

                done

                EOF



                chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh

                '

        SpotPrice:
          Ref: spotBidPrice
        TargetCapacity:
          Ref: ecsClusterTargetCapacity
        TerminateInstancesWithExpiration: true
    Type: AWS::EC2::SpotFleet

# -------------------Splot fleet End ---------------
#
# -------------------ECS Cluster Start -------------------------------
  ecsCluster:
    Type: AWS::ECS::Cluster

  ecsServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /
    Type: AWS::IAM::Role

  taskDefinitionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetAutoscaleRole   # Todo: Add or update the policies here
      Path: /
    Type: AWS::IAM::Role

#  taskDefinition:
#    DependsOn:
#    - cloudWatchLogsGroup
#    Properties:
#      ContainerDefinitions:
#      - Image: jenkins/jenkins:lts
#        LogConfiguration:
#          LogDriver: awslogs
#          Options:
#            awslogs-group:
#              Ref: cloudWatchLogsGroup
#            awslogs-region:
#              Ref: AWS::Region
#        Memory: '2048'
#        Name: jenkins
#        PortMappings:
#        - ContainerPort: 8080
#          HostPort: 0
#          Protocol: tcp
#      TaskRoleArn:
#        Ref: taskDefinitionRole
#    Type: AWS::ECS::TaskDefinition

  taskDefinition:
    DependsOn:
    - cloudWatchLogsGroup
    Properties:
      ContainerDefinitions:
      - Image: sabibm/agency:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: cloudWatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
        Memory: '512'
        Name: agency
        PortMappings:
        - ContainerPort: 9000
          HostPort: 0
          Protocol: tcp
        Environment:
        - Name: EUREKA_SERVER_PUBLIC_IP
          Value: !Join ['', [eureka, ., !Ref 'AWS::Region', ., !Ref 'domainName', .]]
        - Name: SPRING_PROFILES_ACTIVE
          Value: aws
      - Image: sabibm/company:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: cloudWatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
        Memory: '512'
        Name: company
        PortMappings:
        - ContainerPort: 9001
          HostPort: 0
          Protocol: tcp
        Environment:
        - Name: EUREKA_SERVER_PUBLIC_IP
          Value: !Join ['', [eureka, ., !Ref 'AWS::Region', ., !Ref 'domainName', .]]
        - Name: SPRING_PROFILES_ACTIVE
          Value: aws
      - Image: sabibm/edge-router:latest
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: cloudWatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
        Memory: '512'
        Name: edge-router
        PortMappings:
        - ContainerPort: 8080
          HostPort: 0
          Protocol: tcp
        Environment:
        - Name: EUREKA_SERVER_PUBLIC_IP
          Value: !Join ['', [eureka, ., !Ref 'AWS::Region', ., !Ref 'domainName', .]]
        - Name: SPRING_PROFILES_ACTIVE
          Value: aws
      TaskRoleArn:
        Ref: taskDefinitionRole
    Type: AWS::ECS::TaskDefinition

  ecsService:
    DependsOn:
    - ecsCluster
    - ecsServiceRole
    - taskDefinition
    - applicationLoadBalancer
    - applicationLoadBalancerListener
    - applicationLoadBalancerTargetGroup
    Properties:
      Cluster:
        Ref: ecsCluster
      DesiredCount:
        Ref: ecsServiceTargetCapacity
      LoadBalancers:
      - ContainerName: edge-router
        ContainerPort: 8080
        TargetGroupArn:
          Ref: applicationLoadBalancerTargetGroup
      Role:
        Ref: ecsServiceRole
      TaskDefinition:
        Ref: taskDefinition
    Type: AWS::ECS::Service

# -------------------ECS Cluster End -------------------------------

# -------------------SNS Topic Start----------------
  snsTopic:
    Type: AWS::SNS::Topic
# -------------------SNS Topic Start----------------

# -------------------Elastic IP Start----------------
  eurekaElasticIp:
    Type: AWS::EC2::EIP
# -------------------Elastic IP End----------------

# ------------------- Private Hosted Zone Start ----------------
  privateHostedZone:
    DependsOn:
      - eurekaElasticIp
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: ''
      Name:
        Ref: domainName
      VPCs:
      - VPCId:
          Ref: vpc
        VPCRegion:
          Ref: AWS::Region
      HostedZoneTags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  myDNSRecord:
    DependsOn:
      - privateHostedZone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: privateHostedZone
      Comment: DNS name for my elastic IP of Eureka server.
      Name: !Join ['', [eureka, ., !Ref 'AWS::Region', ., !Ref 'domainName', .]]
      Type: A
      TTL: '900'
      ResourceRecords:
      - Ref:
          eurekaElasticIp

# ------------------- Private Hosted Zone End ----------------

# --------------------Eureka Spot fleet Start -------------------------
  eurekaSecurityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Spot fleet instance Security Group for Eureka Instance
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp:
          Ref: sourceCidr
        FromPort: 8761
        IpProtocol: tcp
        ToPort: 8761
      - CidrIp:
          Ref: sourceCidr
        FromPort: 8888
        IpProtocol: tcp
        ToPort: 8888
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup

  eurekaSpotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
    Type: AWS::IAM::Role

  eurekaSpotFleetInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:AllocateAddress
            - ec2:AssociateAddress
            - ec2:DescribeAddresses
            - ec2:DisassociateAddress
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: ec2AssociateAddress
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName: cloudWatchLogsPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
              Ref: snsTopic
          Version: 2012-10-17
        PolicyName: snsPublishPolicy
    Type: AWS::IAM::Role

  eurekaSpotFleetInstanceProfile:
    DependsOn:
    - eurekaSpotFleetInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: eurekaSpotFleetInstanceRole
    Type: AWS::IAM::InstanceProfile

  eurekaSpotFleet:
    DependsOn:
    - eurekaSpotFleetRole
    - eurekaSpotFleetInstanceProfile
    - eurekaSecurityGroup
    - eurekaElasticIp
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: lowestPrice
        IamFleetRole:
          Fn::GetAtt:
          - eurekaSpotFleetRole
          - Arn
        LaunchSpecifications:
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - eurekaSpotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - amazonAmi
            - Ref: AWS::Region
            - AMI
          InstanceType: t2.micro
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: eurekaSecurityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                export PATH=/usr/local/bin:$PATH

                yum -y --security update

                yum -y install jq

                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                EC2_INSTANCE_ID="`wget -q -O - http://169.254.169.254/latest/meta-data/instance-id || die \"wget instance-id has failed: $?\"`"

                echo $EC2_INSTANCE_ID

                aws ec2 associate-address --allow-reassociation --instance-id $EC2_INSTANCE_ID --allocation-id ${eurekaElasticIp.AllocationId}

                yum update -y

                yum install -y git

                yum install -y docker

                service docker start

                usermod -aG docker ec2-user

                curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

                chmod +x /usr/local/bin/docker-compose

                EUREKA_SERVER_PUBLIC_IP=eureka.${AWS::Region}.${domainName}

                cd /home/ec2-user

                git clone https://github.com/ibhi/spring-cloud-docker.git

                cd spring-cloud-docker

                /usr/local/bin/docker-compose -f docker-compose-deps-aws.yml up

                '
        SpotPrice: 0.01
#          Ref: 0.01
        TargetCapacity: 1
#          Ref: 1
        TerminateInstancesWithExpiration: true
    Type: AWS::EC2::SpotFleet
...
